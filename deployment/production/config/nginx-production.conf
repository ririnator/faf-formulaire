# FAF (Form-a-Friend) Production Nginx Configuration
# Optimized for high performance, security, and reliability

# Main HTTP server block - redirects all traffic to HTTPS
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    
    # Security headers even for redirects
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    
    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }
    
    # Redirect everything else to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main HTTPS server block
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name yourdomain.com www.yourdomain.com;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/yourdomain.com.crt;
    ssl_certificate_key /etc/ssl/private/yourdomain.com.key;
    
    # Modern SSL configuration (Mozilla Intermediate)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    
    # SSL optimization
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://res.cloudinary.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https://res.cloudinary.com https://cloudinary.com; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; base-uri 'self';" always;
    add_header X-Permitted-Cross-Domain-Policies none always;
    add_header Clear-Site-Data "cache,cookies,storage,executionContexts" always;
    
    # Remove server version information
    server_tokens off;
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Logging
    access_log /var/log/nginx/faf_access.log combined;
    error_log /var/log/nginx/faf_error.log warn;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=60r/m;
    
    # Main application proxy
    location / {
        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_req_status 429;
        
        # Proxy headers
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Client settings
        client_max_body_size 6M;
        client_body_timeout 60s;
        client_header_timeout 60s;
    }
    
    # API endpoints with stricter rate limiting
    location ~* ^/api/(responses|admin|auth) {
        limit_req zone=api burst=10 nodelay;
        limit_req_status 429;
        
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API specific timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Login endpoints with very strict rate limiting
    location ~* ^/(login|admin-login|auth) {
        limit_req zone=login burst=3 nodelay;
        limit_req_status 429;
        
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        client_max_body_size 1M;
    }
    
    # Upload endpoints
    location ~* ^/(upload|api/upload) {
        limit_req zone=upload burst=5 nodelay;
        limit_req_status 429;
        
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Upload specific settings
        client_max_body_size 6M;
        client_body_timeout 120s;
        proxy_request_buffering off;
        proxy_read_timeout 120s;
        proxy_send_timeout 120s;
    }
    
    # Static files with long-term caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|pdf)$ {
        proxy_pass http://localhost:3000;
        
        # Caching headers
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        
        # Security for static files
        add_header X-Frame-Options DENY;
        
        # Optional: serve static files directly from filesystem if available
        # try_files $uri @backend;
    }
    
    # Health check endpoint (no rate limiting)
    location = /health {
        proxy_pass http://localhost:3000;
        access_log off;
    }
    
    # Robots.txt
    location = /robots.txt {
        proxy_pass http://localhost:3000;
        access_log off;
    }
    
    # Security.txt for responsible disclosure
    location = /.well-known/security.txt {
        return 200 "Contact: security@yourdomain.com\nExpires: 2025-12-31T23:59:59.000Z\nPreferred-Languages: en, fr\nCanonical: https://yourdomain.com/.well-known/security.txt\n";
        add_header Content-Type text/plain;
        add_header Cache-Control "max-age=86400";
    }
    
    # Block access to sensitive files
    location ~* \.(env|log|htaccess|htpasswd|ini|conf|bak|backup|old|tmp)$ {
        deny all;
        return 404;
    }
    
    # Block access to version control directories
    location ~ /\.(git|svn|hg) {
        deny all;
        return 404;
    }
    
    # Block access to node_modules and other development directories
    location ~ /(node_modules|\.npm|tests?|spec|coverage) {
        deny all;
        return 404;
    }
    
    # Maintenance page (uncomment to enable)
    # location / {
    #     return 503;
    # }
    # 
    # location = /maintenance.html {
    #     root /var/www/maintenance;
    #     internal;
    # }
    # 
    # error_page 503 @maintenance;
    # location @maintenance {
    #     rewrite ^(.*)$ /maintenance.html break;
    # }
}

# Fallback for @backend location (if serving static files directly)
# location @backend {
#     proxy_pass http://localhost:3000;
#     proxy_http_version 1.1;
#     proxy_set_header Host $host;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     proxy_set_header X-Forwarded-Proto $scheme;
# }

# Additional server block for www redirect (if needed)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.yourdomain.com;
    
    # Same SSL configuration
    ssl_certificate /etc/ssl/certs/yourdomain.com.crt;
    ssl_certificate_key /etc/ssl/private/yourdomain.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    
    # Redirect to non-www version
    return 301 https://yourdomain.com$request_uri;
}