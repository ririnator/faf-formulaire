# FAF Production Docker Compose Configuration
# Optimized for production deployment with monitoring, backup, and security

version: '3.8'

services:
  # Main FAF Application
  faf-app:
    build:
      context: ../../../
      dockerfile: deployment/production/docker/Dockerfile.production
    container_name: faf-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - SESSION_SECRET=${SESSION_SECRET}
      - LOGIN_ADMIN_USER=${LOGIN_ADMIN_USER}
      - LOGIN_ADMIN_PASS=${LOGIN_ADMIN_PASS}
      - FORM_ADMIN_NAME=${FORM_ADMIN_NAME}
      - APP_BASE_URL=${APP_BASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - HTTPS=${HTTPS:-true}
      - TRUST_PROXY=true
    volumes:
      - app-uploads:/app/uploads
      - app-logs:/var/log/faf
      - ssl-certs:/etc/ssl/certs:ro
      - ssl-private:/etc/ssl/private:ro
    networks:
      - faf-network
    depends_on:
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '1.0'
        reservations:
          memory: 512MB
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: faf-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-faf_production}
    ports:
      - "127.0.0.1:27017:27017"  # Only bind to localhost
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongodb-backups:/backups
    networks:
      - faf-network
    command: --auth --bind_ip_all --replSet rs0
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2GB
          cpus: '1.5'
        reservations:
          memory: 1GB
          cpus: '0.5'

  # Redis for Session Storage and Caching
  redis:
    image: redis:7.2-alpine
    container_name: faf-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - faf-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256MB
          cpus: '0.5'
        reservations:
          memory: 128MB
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: faf-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../config/nginx-production.conf:/etc/nginx/conf.d/default.conf:ro
      - ssl-certs:/etc/ssl/certs:ro
      - ssl-private:/etc/ssl/private:ro
      - nginx-logs:/var/log/nginx
      - certbot-webroot:/var/www/certbot:ro
    networks:
      - faf-network
    depends_on:
      - faf-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256MB
          cpus: '0.5'
        reservations:
          memory: 128MB
          cpus: '0.1'

  # Certbot for SSL Certificates
  certbot:
    image: certbot/certbot
    container_name: faf-certbot
    volumes:
      - certbot-certs:/etc/letsencrypt
      - certbot-webroot:/var/www/certbot
      - ssl-certs:/etc/ssl/certs
      - ssl-private:/etc/ssl/private
    networks:
      - faf-network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Monitoring Dashboard
  monitoring:
    build:
      context: ../../../
      dockerfile: deployment/production/docker/Dockerfile.monitoring
    container_name: faf-monitoring
    restart: unless-stopped
    ports:
      - "127.0.0.1:${MONITORING_PORT:-3001}:3001"  # Only bind to localhost
    environment:
      - NODE_ENV=production
      - MONITOR_USERNAME=${MONITOR_USERNAME:-admin}
      - MONITOR_PASSWORD=${MONITOR_PASSWORD}
      - MONGODB_URI=${MONGODB_URI}
      - LOG_FILE_PATH=/var/log/faf/health.log
    volumes:
      - app-logs:/var/log/faf:ro
      - monitoring-data:/app/data
    networks:
      - faf-network
    depends_on:
      - faf-app
      - mongodb
    deploy:
      resources:
        limits:
          memory: 256MB
          cpus: '0.3'
        reservations:
          memory: 128MB
          cpus: '0.1'

  # Backup Service
  backup:
    build:
      context: ../../../
      dockerfile: deployment/production/docker/Dockerfile.backup
    container_name: faf-backup
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - BACKUP_ENABLED=true
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - BACKUP_STORAGE_PATH=/backups
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION:-eu-west-1}
    volumes:
      - mongodb-backups:/backups
      - app-logs:/var/log/faf:ro
      - backup-data:/app/data
    networks:
      - faf-network
    depends_on:
      - mongodb
    deploy:
      resources:
        limits:
          memory: 512MB
          cpus: '0.5'
        reservations:
          memory: 256MB
          cpus: '0.1'

  # Log Aggregation (optional)
  fluentd:
    image: fluentd:v1.16-1
    container_name: faf-fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf:ro
      - app-logs:/var/log/faf:ro
      - nginx-logs:/var/log/nginx:ro
      - fluentd-data:/fluentd/data
    networks:
      - faf-network
    deploy:
      resources:
        limits:
          memory: 256MB
          cpus: '0.3'
        reservations:
          memory: 128MB
          cpus: '0.1'

# Networks
networks:
  faf-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  # Application data
  app-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/faf/uploads

  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/faf

  # Database data
  mongodb-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/faf/mongodb

  mongodb-config:
    driver: local

  mongodb-backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/backups/faf/mongodb

  # Redis data
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/faf/redis

  # SSL certificates
  ssl-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /etc/ssl/certs

  ssl-private:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /etc/ssl/private

  certbot-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /etc/letsencrypt

  certbot-webroot:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/certbot

  # Nginx logs
  nginx-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/nginx

  # Monitoring data
  monitoring-data:
    driver: local

  # Backup data
  backup-data:
    driver: local

  # Log aggregation data
  fluentd-data:
    driver: local