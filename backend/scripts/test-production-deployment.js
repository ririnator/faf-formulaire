#!/usr/bin/env node

/**
 * Script de test automatis√© pour le d√©ploiement FAF sur Render
 * Usage: node scripts/test-production-deployment.js [URL_PRODUCTION]
 */

const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// Configuration par d√©faut
const CONFIG = {
  PRODUCTION_URL: process.env.PRODUCTION_URL || process.argv[2] || 'https://faf-production.onrender.com',
  ADMIN_USERNAME: process.env.LOGIN_ADMIN_USER || 'admin',
  ADMIN_PASSWORD: process.env.LOGIN_ADMIN_PASS || '',
  TIMEOUT: 10000, // 10 secondes
  MAX_RESPONSE_TIME: 3000 // 3 secondes max pour les pages
};

class ProductionTester {
  constructor() {
    this.baseURL = CONFIG.PRODUCTION_URL;
    this.cookies = new Map();
    this.results = [];
    this.csrfToken = null;
  }

  log(status, test, message, details = {}) {
    const result = {
      status: status, // 'PASS', 'FAIL', 'WARN', 'INFO'
      test: test,
      message: message,
      timestamp: new Date().toISOString(),
      ...details
    };
    
    this.results.push(result);
    
    const emoji = {
      'PASS': '‚úÖ',
      'FAIL': '‚ùå', 
      'WARN': '‚ö†Ô∏è',
      'INFO': '‚ÑπÔ∏è'
    };
    
    console.log(`${emoji[status]} ${test}: ${message}`);
    if (details.responseTime) {
      console.log(`   ‚è±Ô∏è  Temps de r√©ponse: ${details.responseTime}ms`);
    }
    if (details.error) {
      console.log(`   üîç D√©tails: ${details.error}`);
    }
  }

  async makeRequest(method, path, data = null, headers = {}) {
    const startTime = Date.now();
    
    try {
      // Ajouter les cookies existants
      if (this.cookies.size > 0) {
        const cookieString = Array.from(this.cookies.entries())
          .map(([key, value]) => `${key}=${value}`)
          .join('; ');
        headers.Cookie = cookieString;
      }

      const config = {
        method: method,
        url: `${this.baseURL}${path}`,
        timeout: CONFIG.TIMEOUT,
        headers: headers,
        validateStatus: () => true // Ne pas rejeter sur les codes d'erreur
      };

      if (data) {
        if (data instanceof FormData) {
          config.data = data;
        } else {
          config.data = data;
          config.headers['Content-Type'] = 'application/json';
        }
      }

      const response = await axios(config);
      const responseTime = Date.now() - startTime;

      // Sauvegarder les nouveaux cookies
      if (response.headers['set-cookie']) {
        response.headers['set-cookie'].forEach(cookie => {
          const [nameValue] = cookie.split(';');
          const [name, value] = nameValue.split('=');
          this.cookies.set(name.trim(), value);
        });
      }

      return { ...response, responseTime };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      return {
        status: 0,
        data: null,
        error: error.message,
        responseTime
      };
    }
  }

  async testBasicAccess() {
    this.log('INFO', 'Acc√®s de base', 'Test de l\'acc√®s √† l\'application...');
    
    const response = await this.makeRequest('GET', '/');
    
    if (response.status === 200) {
      this.log('PASS', 'Acc√®s homepage', 'Application accessible', {
        responseTime: response.responseTime,
        status: response.status
      });
    } else {
      this.log('FAIL', 'Acc√®s homepage', `Impossible d'acc√©der √† l'application`, {
        responseTime: response.responseTime,
        status: response.status,
        error: response.error
      });
      return false;
    }

    // Test HTTPS forc√©
    if (this.baseURL.startsWith('https://')) {
      const httpURL = this.baseURL.replace('https://', 'http://');
      const httpResponse = await this.makeRequest('GET', '/', null, {});
      
      if (httpResponse.status === 301 || httpResponse.status === 302) {
        this.log('PASS', 'HTTPS forc√©', 'Redirection HTTP vers HTTPS active');
      } else {
        this.log('WARN', 'HTTPS forc√©', 'Redirection HTTP vers HTTPS non d√©tect√©e');
      }
    }

    return true;
  }

  async testPerformance() {
    this.log('INFO', 'Performance', 'Test des temps de r√©ponse...');

    const pages = [
      { path: '/', name: 'Homepage' },
      { path: '/login.html', name: 'Page de connexion' },
      { path: '/admin.html', name: 'Interface admin' }
    ];

    for (const page of pages) {
      const response = await this.makeRequest('GET', page.path);
      
      if (response.responseTime > CONFIG.MAX_RESPONSE_TIME) {
        this.log('WARN', 'Performance', `${page.name} lente`, {
          responseTime: response.responseTime,
          threshold: CONFIG.MAX_RESPONSE_TIME
        });
      } else {
        this.log('PASS', 'Performance', `${page.name} rapide`, {
          responseTime: response.responseTime
        });
      }
    }
  }

  async testCSRFToken() {
    this.log('INFO', 'CSRF', 'Test de la protection CSRF...');
    
    const response = await this.makeRequest('GET', '/api/csrf-token');
    
    if (response.status === 200 && response.data && response.data.csrfToken) {
      this.csrfToken = response.data.csrfToken;
      this.log('PASS', 'CSRF Token', 'Token CSRF obtenu avec succ√®s');
      return true;
    } else {
      this.log('FAIL', 'CSRF Token', 'Impossible d\'obtenir le token CSRF', {
        status: response.status,
        error: response.error
      });
      return false;
    }
  }

  async testAdminLogin() {
    if (!CONFIG.ADMIN_PASSWORD) {
      this.log('WARN', 'Connexion admin', 'Mot de passe admin non fourni, test ignor√©');
      return false;
    }

    this.log('INFO', 'Connexion admin', 'Test de la connexion administrateur...');

    // Obtenir le token CSRF d'abord
    if (!this.csrfToken) {
      await this.testCSRFToken();
    }

    const loginData = {
      login: CONFIG.ADMIN_USERNAME,
      password: CONFIG.ADMIN_PASSWORD
    };

    const headers = {};
    if (this.csrfToken) {
      headers['X-CSRF-Token'] = this.csrfToken;
    }

    const response = await this.makeRequest('POST', '/api/auth/login', loginData, headers);
    
    if (response.status === 200) {
      this.log('PASS', 'Connexion admin', 'Connexion administrateur r√©ussie');
      return true;
    } else {
      this.log('FAIL', 'Connexion admin', '√âchec de la connexion administrateur', {
        status: response.status,
        error: response.data?.message || response.error
      });
      return false;
    }
  }

  async testDatabaseConnection() {
    this.log('INFO', 'Base de donn√©es', 'Test de la connexion MongoDB...');
    
    const response = await this.makeRequest('GET', '/api/admin/responses');
    
    if (response.status === 200 || response.status === 401) {
      // 200 = connect√© et donn√©es r√©cup√©r√©es
      // 401 = connect√© mais non authentifi√© (normal)
      this.log('PASS', 'Base de donn√©es', 'Connexion MongoDB active');
      return true;
    } else {
      this.log('FAIL', 'Base de donn√©es', 'Probl√®me de connexion MongoDB', {
        status: response.status,
        error: response.error
      });
      return false;
    }
  }

  async testFormSubmission() {
    this.log('INFO', 'Formulaire', 'Test de soumission de formulaire...');
    
    // Obtenir le token CSRF
    if (!this.csrfToken) {
      await this.testCSRFToken();
    }

    const testData = {
      name: `Test-${Date.now()}`,
      responses: [
        {
          question: "Question de test",
          answer: "R√©ponse de test"
        }
      ]
    };

    const headers = {};
    if (this.csrfToken) {
      headers['X-CSRF-Token'] = this.csrfToken;
    }

    const response = await this.makeRequest('POST', '/api/responses', testData, headers);
    
    if (response.status === 201) {
      this.log('PASS', 'Formulaire', 'Soumission de formulaire r√©ussie');
      return true;
    } else if (response.status === 400) {
      this.log('WARN', 'Formulaire', 'Validation de formulaire active', {
        status: response.status,
        message: 'Normal si les donn√©es de test ne respectent pas la validation'
      });
      return true;
    } else {
      this.log('FAIL', 'Formulaire', '√âchec de soumission de formulaire', {
        status: response.status,
        error: response.data?.message || response.error
      });
      return false;
    }
  }

  async testSecurityHeaders() {
    this.log('INFO', 'S√©curit√©', 'Test des en-t√™tes de s√©curit√©...');
    
    const response = await this.makeRequest('GET', '/');
    
    const securityHeaders = [
      'Content-Security-Policy',
      'X-Frame-Options',
      'X-Content-Type-Options',
      'Referrer-Policy'
    ];

    let passedHeaders = 0;
    
    securityHeaders.forEach(header => {
      if (response.headers[header.toLowerCase()]) {
        this.log('PASS', 'En-t√™te s√©curit√©', `${header} pr√©sent`);
        passedHeaders++;
      } else {
        this.log('WARN', 'En-t√™te s√©curit√©', `${header} manquant`);
      }
    });

    if (passedHeaders >= 3) {
      this.log('PASS', 'S√©curit√© globale', 'Configuration s√©curit√© satisfaisante');
    } else {
      this.log('WARN', 'S√©curit√© globale', 'Configuration s√©curit√© √† am√©liorer');
    }
  }

  async runAllTests() {
    console.log(`üöÄ D√©but des tests de d√©ploiement pour: ${this.baseURL}\n`);
    
    const startTime = Date.now();
    
    // Tests dans l'ordre logique
    const testResults = {
      basicAccess: await this.testBasicAccess(),
      performance: await this.testPerformance(),
      csrf: await this.testCSRFToken(),
      database: await this.testDatabaseConnection(),
      adminLogin: await this.testAdminLogin(),
      formSubmission: await this.testFormSubmission(),
      securityHeaders: await this.testSecurityHeaders()
    };

    const totalTime = Date.now() - startTime;
    
    // R√©sum√© des r√©sultats
    console.log('\n' + '='.repeat(60));
    console.log('üìä R√âSUM√â DES TESTS');
    console.log('='.repeat(60));
    
    const summary = this.results.reduce((acc, result) => {
      acc[result.status] = (acc[result.status] || 0) + 1;
      return acc;
    }, {});
    
    console.log(`‚úÖ Tests r√©ussis: ${summary.PASS || 0}`);
    console.log(`‚ùå Tests √©chou√©s: ${summary.FAIL || 0}`);
    console.log(`‚ö†Ô∏è  Avertissements: ${summary.WARN || 0}`);
    console.log(`‚ÑπÔ∏è  Informations: ${summary.INFO || 0}`);
    console.log(`‚è±Ô∏è  Temps total: ${totalTime}ms`);
    
    // Recommandations
    console.log('\nüìã RECOMMANDATIONS:');
    
    if (summary.FAIL > 0) {
      console.log('‚ùå Des tests critiques ont √©chou√©. V√©rifiez la configuration.');
    } else if (summary.WARN > 0) {
      console.log('‚ö†Ô∏è  Certains aspects peuvent √™tre am√©lior√©s.');
    } else {
      console.log('‚úÖ Tous les tests sont r√©ussis. D√©ploiement pr√™t pour production!');
    }
    
    // Sauvegarde des r√©sultats
    const reportPath = path.join(__dirname, '..', 'test-reports', `production-test-${Date.now()}.json`);
    
    try {
      if (!fs.existsSync(path.dirname(reportPath))) {
        fs.mkdirSync(path.dirname(reportPath), { recursive: true });
      }
      
      fs.writeFileSync(reportPath, JSON.stringify({
        url: this.baseURL,
        timestamp: new Date().toISOString(),
        duration: totalTime,
        summary: summary,
        results: this.results
      }, null, 2));
      
      console.log(`\nüìÑ Rapport d√©taill√© sauvegard√©: ${reportPath}`);
    } catch (error) {
      console.log(`\n‚ö†Ô∏è  Impossible de sauvegarder le rapport: ${error.message}`);
    }

    return summary.FAIL === 0;
  }
}

// Ex√©cution du script
if (require.main === module) {
  const tester = new ProductionTester();
  
  tester.runAllTests()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå Erreur lors de l\'ex√©cution des tests:', error.message);
      process.exit(1);
    });
}

module.exports = ProductionTester;